@using BlazorPro.Spinkit
@using Blazored.Toast.Configuration
@using MESystem.Data.Location
@using MESystem.Shared
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject SessionValues SessionValues
@inject IJSRuntime jsRuntime

<PageTitle>MESystem @SessionValues.PageName</PageTitle>

<DxLayoutBreakpoint MaxWidth="1200"
                    @bind-IsActive="@IsMobileLayout" />
<div class="@ThemeCss container-fluid bg-dark text-light m-0 p-0">
    <div class="container-fluid m-0 p-0">
        <NavMenu/>
    </div>
    <div class="container-fluid p-0 position-relative m-0">
        <div class="container-fluid animate zoomOutDown m-0 p-0">
           @Body
        </div>
    </div>
    <!-- Full Screen Search Start -->
    <div class="modal fade @ThemeCss" id="searchModal" tabindex="-1">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content" style="background: rgba(9, 30, 62, .7);">
                <div class="modal-header border-0">
                    <button type="button" class="btn bg-white btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body d-flex align-items-center justify-content-center">
                    <div class="input-group" style="max-width: 600px;">
                        <input type="text" class="form-control bg-transparent border-primary p-3" placeholder="Type search keyword">
                        <button class="btn btn-primary px-4"><em class="bi bi-search"></em></button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade @ThemeCss" id="loginModal" tabindex="-1">
        <div class="modal-dialog modal-fullscreen">
            <div class="modal-content" style="background: rgba(9, 30, 62, .7);">
                <div class="modal-header border-0">
                    <button type="button" class="btn bg-white btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body d-flex align-items-center justify-content-center">
                    <SpinLoader IsLoading=@IsLoading>
                        <LoadingTemplate>
                            <div id="spinner" class="show bg-dark col-12 position-fixed translate-middle h-100 vh-100 top-50 start-50 d-flex align-items-center justify-content-center">
                                <div class="spinner bg-primary"></div>
                            </div>
                        </LoadingTemplate>
                        <ContentTemplate>
                           @* <EditForm Model="@_loginViewModel" OnValidSubmit="@AuthenticateJWT">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="col-12">
                                    <input id="input_emailaddress" @onkeypress="OnKeyPress" type="text" @bind="_loginViewModel.EmailAddress" class="form-control dark-theme-textbox" placeholder="email address">
                                </div>
                                <br />
                                <div class="col-12">
                                    <input id="input_password" @onkeypress="OnKeyPress" type="password" @bind="_loginViewModel.Password" class="form-control dark-theme-textbox" placeholder="password">
                                </div>
                                <br />
                                <div class="row">
                                    <div class="col-xl-3 col-lg-3 col-md-6 col-sm-3 col-3">
                                        <button id="button_login" type="submit" class="btn btn-outline-primary">Login</button>
                                    </div>
                                    <div class="col-xl-9 col-lg-9 col-md-6 col-sm-9 col-9">
                                        <a class="text-white" style="font-weight: bold;" href="/createaccount">Create an account</a>
                                    </div>
                                </div>
                            </EditForm>*@
                        </ContentTemplate>
                    </SpinLoader>
                </div>
            </div>
        </div>
    </div>
    <!-- Full Screen Search End -->

    <div class="container-fluid @ThemeCss mb-0 position-relative align-self-end justify-content-center" style="background: #333333;">
        <div class="container text-center">
            <div class="row justify-content-center">
                <div class="col-lg-8 col-md-6">
                    <div class="d-flex align-items-center justify-content-center" style="height: 45px;">
                        <p class="m-auto">
                            &copy; <span class="text-white">FRIWO System Report</span>. All Rights Reserved.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Back to Top -->

    <a href="" class="btn btn-lg btn-primary btn-lg-square rounded back-to-top"><em class="bi bi-arrow-up"></em></a>


<BlazoredToasts Position="ToastPosition.BottomRight"
                IconType="IconType.FontAwesome"
                Timeout="20"
                ErrorIcon="fa-solid fa-rectangle-xmark"
                InfoIcon="fa-solid fa-info"
                SuccessIcon="fa-solid fa-thumbs-up"
                WarningIcon="fa-solid fa-triangle-exclamation"
                MaxToastCount="10"
                RemoveToastsOnNavigation="true"/>
</div>
@code{
    string NavMenuCssClass { get; set; }
    bool _isMobileLayout;

    bool IsMobileLayout
    {
        get => _isMobileLayout;
        set
        {
            _isMobileLayout = value;
            IsSidebarExpanded = !_isMobileLayout;
        }
    }

    bool _isSidebarExpanded = true;
    bool IsSidebarExpanded
    {
        get => _isSidebarExpanded;
        set
        {
            if (_isSidebarExpanded != value)
            {
                NavMenuCssClass = value ? "expand" : "collapse";
                _isSidebarExpanded = value;
            }
        }
    }

    string? ThemeCss { get; set; } = "bg-dark text-light";

    bool _darkTheme = true;
    [Parameter]
    public bool DarkTheme
    {
        get => _darkTheme;
        set
        {
            if (_darkTheme != value)
            {
                ThemeCss = value ? "bg-dark text-light" : "";
                _darkTheme = value;
            }
        }
    }

    [Parameter]
    public bool IsLoading { get; set; }

    protected override async void OnInitialized()
    {
        DarkTheme = true;

        NavigationManager.LocationChanged += OnLocationChanged;
        await Task.Delay(1);
        await InvokeAsync(StateHasChanged);
    }

    async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        if (IsMobileLayout)
        {
            IsSidebarExpanded = false;
                    await Task.Delay(1);
        await InvokeAsync(StateHasChanged);
        }
                await Task.Delay(1);
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
